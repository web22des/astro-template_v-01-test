import { c as createComponent, a as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server-wGLQO-FJ.js';
import 'kleur/colors';
import { $ as $$MarkdownLayout } from './MarkdownLayout-DrnWJRBc.js';

const html = () => "<h2 id=\"1-клиентский-js-внутри-компонента-для-интерактивности\">1. Клиентский JS внутри компонента (для интерактивности)</h2>\n<p>Используйте <code>&#x3C;script></code> тег в вашем <strong>.astro</strong> файле:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"astro\"><code><span class=\"line\"><span style=\"color:#6A737D\">---</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">// Серверный код (выполняется при сборке)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#79B8FF\"> serverData</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> fetchData</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">---</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">&#x3C;!-- Разметка --></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">button</span><span style=\"color:#B392F0\"> class</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"my-button\"</span><span style=\"color:#E1E4E8\">>Click me&#x3C;/</span><span style=\"color:#85E89D\">button</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">&#x3C;!-- Клиентский JavaScript --></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">script</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Этот код выполняется в браузере</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  document.</span><span style=\"color:#B392F0\">querySelector</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'.my-button'</span><span style=\"color:#E1E4E8\">).</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'click'</span><span style=\"color:#E1E4E8\">, () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    alert</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'Button clicked!'</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  });</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;/</span><span style=\"color:#85E89D\">script</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#6A737D\">&#x3C;!-- Стили --></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">style</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  .my-button</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    background</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">blue</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    color</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">white</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;/</span><span style=\"color:#85E89D\">style</span><span style=\"color:#E1E4E8\">></span></span></code></pre>\n<h4 id=\"когда-использовать\">Когда использовать:</h4>\n<ul>\n<li>\n<p>Для простой интерактивности (клики, анимации)</p>\n</li>\n<li>\n<p>Если не нужны сложные состояния или фреймворки (React/Vue)</p>\n</li>\n</ul>\n<h2 id=\"2-отдельный-js-файл-для-сложной-логики\">2. Отдельный JS-файл для сложной логики</h2>\n<p>Если кода много, вынесите его в отдельный файл:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>src/</span></span>\n<span class=\"line\"><span>├── components/</span></span>\n<span class=\"line\"><span>│   └── Button.astro</span></span>\n<span class=\"line\"><span>│   └── Button.client.js  # Клиентский код</span></span></code></pre>\n<h4 id=\"buttonastro\">Button.astro:</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\"><code><span class=\"line\"><span style=\"color:#6A737D\">// Этот код будет загружен только в браузере</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">document.</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"DOMContentLoaded\"</span><span style=\"color:#E1E4E8\">, () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    document.</span><span style=\"color:#B392F0\">querySelector</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\".my-button\"</span><span style=\"color:#E1E4E8\">).</span><span style=\"color:#B392F0\">addEventListener</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"click\"</span><span style=\"color:#E1E4E8\">, () </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Clicked!\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    });</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span></code></pre>\n<h4 id=\"плюсы\">Плюсы:</h4>\n<ul>\n<li>\n<p>Чистая разделенность кода</p>\n</li>\n<li>\n<p>Легче поддерживать</p>\n</li>\n<li>\n<p>Можно использовать TypeScript</p>\n</li>\n</ul>\n<h2 id=\"3-использование-фреймворков-react-vue-и-тд\">3. Использование фреймворков (React, Vue и т.д.)</h2>\n<p>Если нужен сложный интерактив, подключите фреймворк:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"tsx\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> { useState } </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> \"react\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> default</span><span style=\"color:#F97583\"> function</span><span style=\"color:#B392F0\"> Button</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    const</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">count</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">setCount</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> useState</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#E1E4E8\"> &#x3C;</span><span style=\"color:#85E89D\">button</span><span style=\"color:#B392F0\"> onClick</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">{() </span><span style=\"color:#F97583\">=></span><span style=\"color:#B392F0\"> setCount</span><span style=\"color:#E1E4E8\">((</span><span style=\"color:#FFAB70\">c</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> c </span><span style=\"color:#F97583\">+</span><span style=\"color:#79B8FF\"> 1</span><span style=\"color:#E1E4E8\">)}>Clicks: {count}&#x3C;/</span><span style=\"color:#85E89D\">button</span><span style=\"color:#E1E4E8\">>;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<h4 id=\"buttonastro-1\">Button.astro:</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"astro\"><code><span class=\"line\"><span style=\"color:#6A737D\">---</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> Button </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> './Button.tsx'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">---</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#79B8FF\">Button</span><span style=\"color:#B392F0\"> client:load</span><span style=\"color:#E1E4E8\"> /></span></span></code></pre>\n<h4 id=\"когда-использовать-1\">Когда использовать:</h4>\n<ul>\n<li>\n<p>Для сложных интерактивных компонентов</p>\n</li>\n<li>\n<p>Если нужны состояния (state)</p>\n</li>\n<li>\n<p>При интеграции с существующим React/Vue кодом</p>\n</li>\n</ul>\n<h4 id=\"4-лучшие-практики\">4. Лучшие практики</h4>\n<ol>\n<li>\n<p>Для простого кода - пишите прямо в <code>&#x3C;script></code> в <strong>.astro файле</strong></p>\n</li>\n<li>\n<p>Для среднего кода - выносите в <strong>.client.js</strong> файлы</p>\n</li>\n<li>\n<p>Для сложных компонентов - используйте фреймворки (React/Vue/Svelte)</p>\n</li>\n<li>\n<p>Оптимизация:</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>client:load - загрузить сразу (по умолчанию)</p>\n</li>\n<li>\n<p>client:idle - загрузить когда браузер простаивает</p>\n</li>\n<li>\n<p>client:visible - загрузить когда компонент появляется в viewport</p>\n</li>\n</ul>\n<h2 id=\"пример-полной-структуры\">Пример полной структуры</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>src/</span></span>\n<span class=\"line\"><span>├── components/</span></span>\n<span class=\"line\"><span>│   ├── SimpleButton.astro          # Простой компонент с inline JS</span></span>\n<span class=\"line\"><span>│   ├── ComplexButton.client.js     # Отдельный JS файл</span></span>\n<span class=\"line\"><span>│   └── ReactButton.tsx            # React компонент</span></span>\n<span class=\"line\"><span>└── pages/</span></span>\n<span class=\"line\"><span>    └── index.astro                # Страница</span></span></code></pre>\n<h4 id=\"indexastro\">index.astro:</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"astro\"><code><span class=\"line\"><span style=\"color:#6A737D\">---</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> SimpleButton </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> '../components/SimpleButton.astro'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> ComplexButton </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> '../components/ComplexButton.client.js'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> ReactButton </span><span style=\"color:#F97583\">from</span><span style=\"color:#9ECBFF\"> '../components/ReactButton.tsx'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">---</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#79B8FF\">SimpleButton</span><span style=\"color:#E1E4E8\"> /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#79B8FF\">ComplexButton</span><span style=\"color:#E1E4E8\"> /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#79B8FF\">ReactButton</span><span style=\"color:#B392F0\"> client:load</span><span style=\"color:#E1E4E8\"> /></span></span></code></pre>\n<h2 id=\"вывод\">Вывод</h2>\n<ol>\n<li>\n<p>Немного JS - пишите прямо в компоненте <code>(&#x3C;script>)</code></p>\n</li>\n<li>\n<p>Средний JS - выносите в <strong>.client.js</strong> файлы</p>\n</li>\n<li>\n<p>Сложный JS - используйте фреймворки (React/Vue)</p>\n</li>\n<li>\n<p>Всегда указывайте стратегию загрузки (<code>client:load/idle/visible</code>)</p>\n</li>\n</ol>\n<p>Это обеспечит оптимальную производительность и чистоту кода.</p>";

				const frontmatter = {"layout":"../../layouts/MarkdownLayout.astro","title":"Клиентский JS внутри компонента (для интерактивности)","date":"2023-11-17T00:00:00.000Z","description":"Это пример описания поста"};
				const file = "/home/runner/work/astro-template_v-01-test/astro-template_v-01-test/src/pages/posts/post03.md";
				const url = "/astro-template_v-01-test/posts/post03/";
				function rawContent() {
					return "   \n                                          \n                                                              \n\n                \n                                        \n   \n\n## 1. Клиентский JS внутри компонента (для интерактивности)\n\nИспользуйте `<script>` тег в вашем **.astro** файле:\n\n```astro\n---\n// Серверный код (выполняется при сборке)\nconst serverData = fetchData();\n---\n\n<!-- Разметка -->\n<button class=\"my-button\">Click me</button>\n\n<!-- Клиентский JavaScript -->\n<script>\n  // Этот код выполняется в браузере\n  document.querySelector('.my-button').addEventListener('click', () => {\n    alert('Button clicked!');\n  });\n</script>\n\n<!-- Стили -->\n<style>\n  .my-button {\n    background: blue;\n    color: white;\n  }\n</style>\n```\n\n#### Когда использовать:\n\n-   Для простой интерактивности (клики, анимации)\n\n-   Если не нужны сложные состояния или фреймворки (React/Vue)\n\n## 2. Отдельный JS-файл для сложной логики\n\nЕсли кода много, вынесите его в отдельный файл:\n\n```txt\nsrc/\n├── components/\n│   └── Button.astro\n│   └── Button.client.js  # Клиентский код\n```\n\n#### Button.astro:\n\n```js\n// Этот код будет загружен только в браузере\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    document.querySelector(\".my-button\").addEventListener(\"click\", () => {\n        console.log(\"Clicked!\");\n    });\n});\n```\n\n#### Плюсы:\n\n-   Чистая разделенность кода\n\n-   Легче поддерживать\n\n-   Можно использовать TypeScript\n\n## 3. Использование фреймворков (React, Vue и т.д.)\n\nЕсли нужен сложный интерактив, подключите фреймворк:\n\n```tsx\nimport { useState } from \"react\";\n\nexport default function Button() {\n    const [count, setCount] = useState(0);\n\n    return <button onClick={() => setCount((c) => c + 1)}>Clicks: {count}</button>;\n}\n```\n\n#### Button.astro:\n\n```astro\n---\nimport Button from './Button.tsx';\n---\n\n<Button client:load />\n```\n\n#### Когда использовать:\n\n-   Для сложных интерактивных компонентов\n\n-   Если нужны состояния (state)\n\n-   При интеграции с существующим React/Vue кодом\n\n#### 4. Лучшие практики\n\n1. Для простого кода - пишите прямо в `<script>` в **.astro файле**\n\n2. Для среднего кода - выносите в **.client.js** файлы\n\n3. Для сложных компонентов - используйте фреймворки (React/Vue/Svelte)\n4. Оптимизация:\n\n-   client:load - загрузить сразу (по умолчанию)\n\n-   client:idle - загрузить когда браузер простаивает\n\n-   client:visible - загрузить когда компонент появляется в viewport\n\n## Пример полной структуры\n\n```txt\nsrc/\n├── components/\n│   ├── SimpleButton.astro          # Простой компонент с inline JS\n│   ├── ComplexButton.client.js     # Отдельный JS файл\n│   └── ReactButton.tsx            # React компонент\n└── pages/\n    └── index.astro                # Страница\n```\n\n#### index.astro:\n\n```astro\n---\nimport SimpleButton from '../components/SimpleButton.astro';\nimport ComplexButton from '../components/ComplexButton.client.js';\nimport ReactButton from '../components/ReactButton.tsx';\n---\n\n<SimpleButton />\n<ComplexButton />\n<ReactButton client:load />\n```\n\n## Вывод\n\n1. Немного JS - пишите прямо в компоненте `(<script>)`\n\n2. Средний JS - выносите в **.client.js** файлы\n\n3. Сложный JS - используйте фреймворки (React/Vue)\n\n4. Всегда указывайте стратегию загрузки (`client:load/idle/visible`)\n\nЭто обеспечит оптимальную производительность и чистоту кода.\n";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":2,"slug":"1-клиентский-js-внутри-компонента-для-интерактивности","text":"1. Клиентский JS внутри компонента (для интерактивности)"},{"depth":4,"slug":"когда-использовать","text":"Когда использовать:"},{"depth":2,"slug":"2-отдельный-js-файл-для-сложной-логики","text":"2. Отдельный JS-файл для сложной логики"},{"depth":4,"slug":"buttonastro","text":"Button.astro:"},{"depth":4,"slug":"плюсы","text":"Плюсы:"},{"depth":2,"slug":"3-использование-фреймворков-react-vue-и-тд","text":"3. Использование фреймворков (React, Vue и т.д.)"},{"depth":4,"slug":"buttonastro-1","text":"Button.astro:"},{"depth":4,"slug":"когда-использовать-1","text":"Когда использовать:"},{"depth":4,"slug":"4-лучшие-практики","text":"4. Лучшие практики"},{"depth":2,"slug":"пример-полной-структуры","text":"Пример полной структуры"},{"depth":4,"slug":"indexastro","text":"index.astro:"},{"depth":2,"slug":"вывод","text":"Вывод"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MarkdownLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const __vite_glob_0_2 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { __vite_glob_0_2 as _ };
