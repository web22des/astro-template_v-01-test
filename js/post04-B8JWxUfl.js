import { c as createComponent, a as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server-wGLQO-FJ.js';
import 'kleur/colors';
import { $ as $$MarkdownLayout } from './MarkdownLayout-DrnWJRBc.js';

const html = () => "<h1 id=\"куда-попадают-стили-и-скрипты-из-astro-компонентов-при-сборке\">Куда попадают стили и скрипты из Astro-компонентов при сборке</h1>\n<p>При сборке Astro-проекта (astro build) система оптимизирует и распределяет ваш код особым образом. Вот что происходит с разными типами ресурсов:</p>\n<h2 id=\"1-стили-style-внутри-компонента\">1. Стили (<code>&#x3C;style></code> внутри компонента)</h2>\n<h4 id=\"что-происходит\">Что происходит:</h4>\n<ul>\n<li>\n<p>Все CSS/SCSS из компонентов объединяются в один или несколько оптимизированных <code>.css</code>-файлов.</p>\n</li>\n<li>\n<p>Astro автоматически удаляет неиспользуемые стили (если не указано <strong>is:global</strong>).</p>\n</li>\n<li>\n<p>Классы получают уникальные хеши (например, .header → <code>.\\_header_1a2b3c</code>), чтобы избежать конфликтов.</p>\n</li>\n</ul>\n<h4 id=\"где-оказываются\">Где оказываются:</h4>\n<p>В итоговой сборке стили попадают в:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>dist/</span></span>\n<span class=\"line\"><span>├── assets/</span></span>\n<span class=\"line\"><span>│   └── style.[hash].css       # Основной CSS-файл</span></span>\n<span class=\"line\"><span>└── index.html                 # Автоматически подключается</span></span></code></pre>\n<h4 id=\"пример\">Пример:</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"astro\"><code><span class=\"line\"><span style=\"color:#6A737D\">&#x3C;!-- Button.astro --></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">style</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  .btn</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#79B8FF\">color</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">red</span><span style=\"color:#E1E4E8\">; }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;/</span><span style=\"color:#85E89D\">style</span><span style=\"color:#E1E4E8\">></span></span></code></pre>\n<blockquote>\n<p>Превратится в <code>assets/style.abc123.css</code> с селектором <code>.\\_btn_x1y2z3.</code></p>\n</blockquote>\n<h2 id=\"2-инлайн-скрипты-script-без-атрибутов\">2. Инлайн-скрипты (<code>&#x3C;script></code> без атрибутов)</h2>\n<h4 id=\"что-происходит-1\">Что происходит:</h4>\n<ul>\n<li>\n<p>Скрипты остаются в HTML как инлайн-код (если они маленькие).</p>\n</li>\n<li>\n<p>Для больших скриптов Astro может вынести их в отдельный .js-файл.</p>\n</li>\n</ul>\n<h4 id=\"где-оказываются-1\">Где оказываются:</h4>\n<ul>\n<li>Либо внутри <code>&#x3C;script></code> в HTML:</li>\n</ul>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#6A737D\">&#x3C;!-- dist/index.html --></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">script</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    console.</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Hello!\"</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;/</span><span style=\"color:#85E89D\">script</span><span style=\"color:#E1E4E8\">></span></span></code></pre>\n<ul>\n<li>Либо в <code>assets/script.[hash].js</code> (если код большой).</li>\n</ul>\n<h2 id=\"3-скрипты-с-атрибутами-clientload-clientidle-и-тд\">3. Скрипты с атрибутами (client:load, client:idle и т.д.)</h2>\n<h4 id=\"что-происходит-2\">Что происходит:</h4>\n<ul>\n<li>\n<p>Скрипты выносятся в отдельные .js-файлы.</p>\n</li>\n<li>\n<p>Загружаются по стратегии:</p>\n<ul>\n<li>\n<p>client:load — сразу при загрузке страницы.</p>\n</li>\n<li>\n<p>client:idle — когда браузер простаивает.</p>\n</li>\n<li>\n<p>client:visible — когда компонент появляется в viewport.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"где-оказываются-2\">Где оказываются:</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>dist/</span></span>\n<span class=\"line\"><span>├── assets/</span></span>\n<span class=\"line\"><span>│   ├── Button.[hash].js      # Отдельный JS для компонента</span></span>\n<span class=\"line\"><span>│   └── chunks/              # Дополнительные фрагменты кода</span></span>\n<span class=\"line\"><span>└── index.html</span></span></code></pre>\n<h2 id=\"4-скрипты-из-clientjs-файлов\">4. Скрипты из .client.js-файлов</h2>\n<h4 id=\"что-происходит-3\">Что происходит:</h4>\n<ul>\n<li>\n<p>Весь код из таких файлов автоматически обрабатывается Vite (как и в dev-режиме).</p>\n</li>\n<li>\n<p>Дерешится (tree-shaking) — удаляется неиспользуемый код.</p>\n</li>\n<li>\n<p>Минифицируется.</p>\n</li>\n</ul>\n<h4 id=\"где-оказываются-3\">Где оказываются:</h4>\n<ul>\n<li>В <code>assets/[имя-файла].[hash].js</code>:</li>\n</ul>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>dist/assets/ComplexButton.xyz789.js</span></span></code></pre>\n<h2 id=\"5-стили-и-скрипты-фреймворков-react-vue-и-др\">5. Стили и скрипты фреймворков (React, Vue и др.)</h2>\n<h4 id=\"что-происходит-4\">Что происходит:</h4>\n<ul>\n<li>\n<p>Компоненты на React/Vue/Svelte компилируются в чистый JS.</p>\n</li>\n<li>\n<p>Их стили (если есть) добавляются в общий CSS-бандл.</p>\n</li>\n<li>\n<p>Код разбивается на chunks для оптимизации загрузки.</p>\n</li>\n</ul>\n<h4 id=\"где-оказываются-4\">Где оказываются:</h4>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>dist/</span></span>\n<span class=\"line\"><span>├── assets/</span></span>\n<span class=\"line\"><span>│   ├── ReactButton.[hash].js    # Код компонента</span></span>\n<span class=\"line\"><span>│   ├── vendor.[hash].js         # Общие библиотеки (React и т.д.)</span></span>\n<span class=\"line\"><span>│   └── style.[hash].css         # Стили</span></span>\n<span class=\"line\"><span>└── index.html</span></span></code></pre>\n<h2 id=\"6-что-насчет-public-файлов\">6. Что насчет public/-файлов?</h2>\n<ul>\n<li>Файлы из <code>public/</code> копируются как есть без обработки:</li>\n</ul>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"txt\"><code><span class=\"line\"><span>public/fonts/ → dist/fonts/</span></span>\n<span class=\"line\"><span>public/robots.txt → dist/robots.txt</span></span></code></pre>\n<h2 id=\"итог-куда-что-попадает\">Итог: куда что попадает</h2>\n<h3 id=\"распределение-ресурсов-при-сборке-astro\">Распределение ресурсов при сборке Astro</h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Тип кода</th><th>Куда попадает</th><th>Особенности обработки</th></tr></thead><tbody><tr><td><strong>Стили в компоненте</strong></td><td><code>assets/style.[hash].css</code></td><td>Объединяются, минифицируются</td></tr><tr><td><strong>Инлайн-скрипты</strong></td><td>Остаются в HTML</td><td>Не обрабатываются</td></tr><tr><td><strong>client:load скрипты</strong></td><td><code>assets/[name].[hash].js</code></td><td>Дерешинг, минификация</td></tr><tr><td><strong>React/Vue компоненты</strong></td><td><code>assets/[name].[hash].js</code></td><td>Компиляция в JS, lazy-load</td></tr><tr><td><strong>Глобальные стили</strong></td><td><code>assets/global.[hash].css</code></td><td>Минификация</td></tr><tr><td><strong>Файлы из public/</strong></td><td>Копируются как есть</td><td>Без обработки</td></tr><tr><td><strong>Изображения</strong></td><td><code>assets/[name].[hash][ext]</code></td><td>Оптимизация</td></tr></tbody></table>\n<p><strong>Ключевые особенности:</strong></p>\n<ul>\n<li>Хеширование имен для кеширования</li>\n<li>Автоматическое объединение CSS</li>\n<li>Разделение JS по стратегиям загрузки</li>\n<li>Удаление неиспользуемого кода (tree-shaking)</li>\n</ul>\n<h2 id=\"как-проверить-на-практике\">Как проверить на практике?</h2>\n<ol>\n<li>Запустите сборку:</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">astro</span><span style=\"color:#9ECBFF\"> build</span></span></code></pre>\n<ol start=\"2\">\n<li>Посмотрите содержимое папки <code>dist/</code>:</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">ls</span><span style=\"color:#79B8FF\"> -R</span><span style=\"color:#9ECBFF\"> dist</span></span></code></pre>\n<ol start=\"3\">\n<li>Откройте HTML-файлы — вы увидите, как Astro подключил ресурсы. <strong>Совет:</strong> Используйте astro check для анализа бандла.</li>\n</ol>\n<h2 id=\"оптимизации-которые-делает-astro\">Оптимизации, которые делает Astro</h2>\n<ul>\n<li>\n<p><strong>Объединение CSS/JS</strong> → Меньше HTTP-запросов.</p>\n</li>\n<li>\n<p><strong>Хеширование имён файлов</strong> → Кеширование в браузере.</p>\n</li>\n<li>\n<p><strong>Tree-shaking</strong> → Удаление неиспользуемого кода.</p>\n</li>\n<li>\n<p><strong>Ленивая загрузка (client:idle/visible)</strong> → Быстрая первоначальная загрузка.</p>\n</li>\n</ul>\n<p>Теперь вы точно знаете, куда попадает каждый ваш стиль и скрипт!</p>";

				const frontmatter = {"layout":"../../layouts/MarkdownLayout.astro","title":"Куда попадают стили и скрипты из Astro-компонентов при сборке","date":"2023-11-18T00:00:00.000Z","description":"Это пример описания поста"};
				const file = "/home/runner/work/astro-template_v-01-test/astro-template_v-01-test/src/pages/posts/post04.md";
				const url = "/astro-template_v-01-test/posts/post04/";
				function rawContent() {
					return "   \n                                          \n                                                                      \n\n                \n                                        \n   \n\n# Куда попадают стили и скрипты из Astro-компонентов при сборке\n\nПри сборке Astro-проекта (astro build) система оптимизирует и распределяет ваш код особым образом. Вот что происходит с разными типами ресурсов:\n\n## 1. Стили (`<style>` внутри компонента)\n\n#### Что происходит:\n\n-   Все CSS/SCSS из компонентов объединяются в один или несколько оптимизированных `.css`-файлов.\n\n-   Astro автоматически удаляет неиспользуемые стили (если не указано **is:global**).\n\n-   Классы получают уникальные хеши (например, .header → `.\\_header_1a2b3c`), чтобы избежать конфликтов.\n\n#### Где оказываются:\n\nВ итоговой сборке стили попадают в:\n\n```txt\ndist/\n├── assets/\n│   └── style.[hash].css       # Основной CSS-файл\n└── index.html                 # Автоматически подключается\n```\n\n#### Пример:\n\n```astro\n<!-- Button.astro -->\n<style>\n  .btn { color: red; }\n</style>\n```\n\n> Превратится в `assets/style.abc123.css` с селектором `.\\_btn_x1y2z3.`\n\n## 2. Инлайн-скрипты (`<script>` без атрибутов)\n\n#### Что происходит:\n\n-   Скрипты остаются в HTML как инлайн-код (если они маленькие).\n\n-   Для больших скриптов Astro может вынести их в отдельный .js-файл.\n\n#### Где оказываются:\n\n-   Либо внутри `<script>` в HTML:\n\n```html\n<!-- dist/index.html -->\n<script>\n    console.log(\"Hello!\");\n</script>\n```\n\n-   Либо в `assets/script.[hash].js` (если код большой).\n\n## 3. Скрипты с атрибутами (client:load, client:idle и т.д.)\n\n#### Что происходит:\n\n-   Скрипты выносятся в отдельные .js-файлы.\n\n-   Загружаются по стратегии:\n\n    -   client:load — сразу при загрузке страницы.\n\n    -   client:idle — когда браузер простаивает.\n\n    -   client:visible — когда компонент появляется в viewport.\n\n#### Где оказываются:\n\n```txt\ndist/\n├── assets/\n│   ├── Button.[hash].js      # Отдельный JS для компонента\n│   └── chunks/              # Дополнительные фрагменты кода\n└── index.html\n```\n\n## 4. Скрипты из .client.js-файлов\n\n#### Что происходит:\n\n-   Весь код из таких файлов автоматически обрабатывается Vite (как и в dev-режиме).\n\n-   Дерешится (tree-shaking) — удаляется неиспользуемый код.\n\n-   Минифицируется.\n\n#### Где оказываются:\n\n-   В `assets/[имя-файла].[hash].js`:\n\n```txt\ndist/assets/ComplexButton.xyz789.js\n```\n\n## 5. Стили и скрипты фреймворков (React, Vue и др.)\n\n#### Что происходит:\n\n-   Компоненты на React/Vue/Svelte компилируются в чистый JS.\n\n-   Их стили (если есть) добавляются в общий CSS-бандл.\n\n-   Код разбивается на chunks для оптимизации загрузки.\n\n#### Где оказываются:\n\n```txt\ndist/\n├── assets/\n│   ├── ReactButton.[hash].js    # Код компонента\n│   ├── vendor.[hash].js         # Общие библиотеки (React и т.д.)\n│   └── style.[hash].css         # Стили\n└── index.html\n```\n\n## 6. Что насчет public/-файлов?\n\n-   Файлы из `public/` копируются как есть без обработки:\n\n```txt\npublic/fonts/ → dist/fonts/\npublic/robots.txt → dist/robots.txt\n```\n\n## Итог: куда что попадает\n\n### Распределение ресурсов при сборке Astro\n\n| Тип кода                 | Куда попадает               | Особенности обработки        |\n| ------------------------ | --------------------------- | ---------------------------- |\n| **Стили в компоненте**   | `assets/style.[hash].css`   | Объединяются, минифицируются |\n| **Инлайн-скрипты**       | Остаются в HTML             | Не обрабатываются            |\n| **client:load скрипты**  | `assets/[name].[hash].js`   | Дерешинг, минификация        |\n| **React/Vue компоненты** | `assets/[name].[hash].js`   | Компиляция в JS, lazy-load   |\n| **Глобальные стили**     | `assets/global.[hash].css`  | Минификация                  |\n| **Файлы из public/**     | Копируются как есть         | Без обработки                |\n| **Изображения**          | `assets/[name].[hash][ext]` | Оптимизация                  |\n\n**Ключевые особенности:**\n\n-   Хеширование имен для кеширования\n-   Автоматическое объединение CSS\n-   Разделение JS по стратегиям загрузки\n-   Удаление неиспользуемого кода (tree-shaking)\n\n## Как проверить на практике?\n\n1. Запустите сборку:\n\n```bash\nastro build\n```\n\n2. Посмотрите содержимое папки `dist/`:\n\n```bash\nls -R dist\n```\n\n3. Откройте HTML-файлы — вы увидите, как Astro подключил ресурсы. **Совет:** Используйте astro check для анализа бандла.\n\n## Оптимизации, которые делает Astro\n\n-   **Объединение CSS/JS** → Меньше HTTP-запросов.\n\n-   **Хеширование имён файлов** → Кеширование в браузере.\n\n-   **Tree-shaking** → Удаление неиспользуемого кода.\n\n-   **Ленивая загрузка (client:idle/visible)** → Быстрая первоначальная загрузка.\n\nТеперь вы точно знаете, куда попадает каждый ваш стиль и скрипт!\n";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"куда-попадают-стили-и-скрипты-из-astro-компонентов-при-сборке","text":"Куда попадают стили и скрипты из Astro-компонентов при сборке"},{"depth":2,"slug":"1-стили-style-внутри-компонента","text":"1. Стили (<style> внутри компонента)"},{"depth":4,"slug":"что-происходит","text":"Что происходит:"},{"depth":4,"slug":"где-оказываются","text":"Где оказываются:"},{"depth":4,"slug":"пример","text":"Пример:"},{"depth":2,"slug":"2-инлайн-скрипты-script-без-атрибутов","text":"2. Инлайн-скрипты (<script> без атрибутов)"},{"depth":4,"slug":"что-происходит-1","text":"Что происходит:"},{"depth":4,"slug":"где-оказываются-1","text":"Где оказываются:"},{"depth":2,"slug":"3-скрипты-с-атрибутами-clientload-clientidle-и-тд","text":"3. Скрипты с атрибутами (client:load, client:idle и т.д.)"},{"depth":4,"slug":"что-происходит-2","text":"Что происходит:"},{"depth":4,"slug":"где-оказываются-2","text":"Где оказываются:"},{"depth":2,"slug":"4-скрипты-из-clientjs-файлов","text":"4. Скрипты из .client.js-файлов"},{"depth":4,"slug":"что-происходит-3","text":"Что происходит:"},{"depth":4,"slug":"где-оказываются-3","text":"Где оказываются:"},{"depth":2,"slug":"5-стили-и-скрипты-фреймворков-react-vue-и-др","text":"5. Стили и скрипты фреймворков (React, Vue и др.)"},{"depth":4,"slug":"что-происходит-4","text":"Что происходит:"},{"depth":4,"slug":"где-оказываются-4","text":"Где оказываются:"},{"depth":2,"slug":"6-что-насчет-public-файлов","text":"6. Что насчет public/-файлов?"},{"depth":2,"slug":"итог-куда-что-попадает","text":"Итог: куда что попадает"},{"depth":3,"slug":"распределение-ресурсов-при-сборке-astro","text":"Распределение ресурсов при сборке Astro"},{"depth":2,"slug":"как-проверить-на-практике","text":"Как проверить на практике?"},{"depth":2,"slug":"оптимизации-которые-делает-astro","text":"Оптимизации, которые делает Astro"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$MarkdownLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const __vite_glob_0_3 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { __vite_glob_0_3 as _ };
